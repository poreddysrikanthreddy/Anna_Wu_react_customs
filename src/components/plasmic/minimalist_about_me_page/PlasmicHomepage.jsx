// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iHk6jMiWChyc6fQLxCASj8
// Component: QUxXJR8XUkA
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CopyableLink from "../../CopyableLink"; // plasmic-import: uBQPLU5rdIg/component
import { useScreenVariants as useScreenVariantselg9EB2GxMz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: elg9eB2GxMZ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_minimalist_about_me_page.module.css"; // plasmic-import: iHk6jMiWChyc6fQLxCASj8/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: QUxXJR8XUkA/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 9RS2-s2vnUS/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: K81yeLM3o2q/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: PWWAiV5jC9I/icon

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantselg9EB2GxMz()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__bzvLk)}>
            <div className={classNames(projectcss.all, sty.freeBox__hxtzk)} />
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lm9EN)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__lvWdd)}>
                <div className={classNames(projectcss.all, sty.freeBox__lwCNn)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s4N1
                    )}
                  >
                    {"Anna Wu"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hgaq
                    )}
                  >
                    {
                      "Building things for building things.\nDesign and code at Plasmic."
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wQVwF)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vFx2C
                  )}
                >
                  {" "}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__hCfs)}>
                  <CopyableLink
                    data-plasmic-name={"copyableLink"}
                    data-plasmic-override={overrides.copyableLink}
                    className={classNames("__wab_instance", sty.copyableLink)}
                  >
                    {"aw@gmail.com"}
                  </CopyableLink>
                </div>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__udtV)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rAqXm)}
                  >
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__osunJ
                      )}
                      href={"https://www.twitter.com"}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__qWyE1)}
                        role={"img"}
                      />
                    </a>
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link___6WT7C
                      )}
                      href={"https://www.dribbble.com"}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__iQuIs)}
                        role={"img"}
                      />
                    </a>
                    <a
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__zNup1
                      )}
                      href={"https://www.github.com"}
                    >
                      <Icon3Icon
                        className={classNames(projectcss.all, sty.svg__bfRan)}
                        role={"img"}
                      />
                    </a>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
            <div className={classNames(projectcss.all, sty.freeBox___6YVbJ)} />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "copyableLink"],
  copyableLink: ["copyableLink"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    copyableLink: makeNodeComponent("copyableLink"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
